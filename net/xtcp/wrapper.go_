package xtcp

import (
	"fmt"
	"net"

	"github.com/xsuners/mo/log"
)

type options struct {
	topts []ServerOption
	ip string
	port int
}

var defaultOptions = options{
	topts: defaultOptions()
}

// Option sets server options.
type Option func(*options)

// DB returns a Option that will set TLS credentials for server
// connections.
func DB(db int) Option {
	return func(o *options) {
		o.ropts.DB = db
	}
}


// Wrapper .
type Wrapper struct {
	server *Server
	ip     string
	port   int
}

// New .
func New(opt ...Option) (w *Wrapper, cf func(), err error) {
	w = new(Wrapper)
	w.server = NewServer(opt...)
	cf = func() {
		log.Info("xtcp wrapper is closing...")
		w.server.Stop()
		log.Info("xtcp wrapper is closed.")
	}
	return w
}

// Server .
func (w *Wrapper) Server() *Server {
	return w.server
}

// Start .
func (w *Wrapper) Start() (err error) {
	l, err := net.Listen("tcp", fmt.Sprintf("%s:%d", w.conf.IP, w.conf.Port))
	if err != nil {
		return
	}

	w.server.Start(l)

	return
}

// Stop .
func (w *Wrapper) Stop() (err error) {
	w.server.Stop()
	return
}
